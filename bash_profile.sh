# generated by Git for Windows
test -f ~/.profile && . ~/.profile
test -f ~/.bashrc && . ~/.bashrc

source /mingw64/share/git/completion/git-completion.bash

# colors!
green="\[\033[1;32m\]"
blue="\[\033[1;34m\]"
purple="\[\033[1;35m\]"
yellow="\[\033[1;33m\]"
red="\[\033[1;31m\]"
black="\[\033[1;30m\]"
white="\[\033[1;37m\]"
cyan="\[\033[1;36m\]"
reset="\[\033[0m\]"

# Change command prompt

source /etc/profile.d/git-prompt.sh
export GIT_PS1_SHOWDIRTYSTATE=1
# '\u' adds the name of the current user to the prompt
# '\$(__git_ps1)' adds git-related stuff
# '\W' adds the name of the current directory
export PS1="$blue\u$green\$(__git_ps1)$cyan \W $ $reset"




source /mingw64/share/git/completion/git-completion.bash
gab() {
 commit_message="regular automatic update"

 # Check if this or any parent directory is a git repository
 isInsideGitRepo=$(git rev-parse --is-inside-work-tree 2>/dev/null)

 if [ -z "$isInsideGitRepo" ]; then
  git init
 fi

 # Check if a remote repository is set up
 if [ $(git remote | wc -l) -gt 0 ]; then
  git pull
 fi

 git add .
 git commit -m "$commit_message"

 # Check if a remote repository is set up
 if [ $(git remote | wc -l) -gt 0 ]; then
  git push
 fi
}
function garemote {
 if [ -z "$1" ]; then
  echo "Please provide a GitHub repository link."
  return
 fi

 gab

 git remote add origin "$1"
 git branch -M master
 git push -u origin master
}

function gaf {
 if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Please provide a GitHub repository link and folder path."
  return
 fi

 git submodule add "$1" "$2"

 git add .
 git commit -m "Added a new submodule in a subfolder"
 git push
}

function gafUpdate {
 if [ -z "$1" ]; then
  echo "Please provide a branch name."
  return
 fi

 git fetch
 git checkout "$1"
 git pull origin "$1"

 cd ..
 git add .
 git commit -m "Updated submodule to the latest commit"
}

function pull {
 git diff-index --quiet HEAD || git commit -am "auto commit before pull"
 git pull
}
# Git related functions
function ga() { git add "$@"; }
function gaa() { git add --all; }
function gb() { git branch "$@"; }
function gcommit() { git commit "$@"; }
function gcc() { git checkout "$@"; }
function gcf() { git checkout feature; }
function gcm() { git checkout master; }
function gm() { git merge "$@"; }
function gpo() { git push origin "$@"; }
function gstat() { git status -sb; }
function ignor() { touch .gitignore; }
function init() { git init; }
function pop() { git stash pop; }
function push() { git push "$@"; }
function stash() { git stash "$@"; }
function stashp() { git stash push "$@"; }

glog() { git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit; }

# Directory navigation functions
PhD() { cd "/c/Users/ahm_e/Documents/PROJECT-PHD-Thesis-DRAFT"; code .; }
curdir() { cd "/c/Users/ahm_e/Documents/PROJECTs/GSCsDisplay"; }
documents() { cd "/c/Users/ahm_e/Documents"; }
downloads() { cd "/c/Users/ahm_e/Downloads"; }
d() { cd "/d"; }

# System commands
cls() { clear; }
cmd() { cmd.exe "$@"; }
py() { python "$@"; }

# Clearing functions
clear_tex() {
 find . \( -name "*.aux" -o -name "*.log" -o -name "*.synctex.gz" -o -name "*.out" -o -name "*.bbl" -o -name "*.blg" -o -name "*.slxc" -o -name "*.slx.autosave" -o -name "*.fdb_latexmk" -o -name "*.fls" -o -name "*.toc" -o -name "*.fdb_latexmk" -o -name "*.snm" -o -name "*.nav" -o -name "*.synctex(busy)" -o -name "*.dvi" -o -name "*.synctex.gz.sum.synctex" -o -name "*.acn" -o -name "*.glo" -o -name "*.ist" -o -name "*.acr" -o -name "*.alg" -o -name "*.glg" -o -name "*.gls" -o -name "*.glsdefs" -o -name "*.glstex" -o -name "*.glg" -o -name "*.lof" -o -name "*.lot" -o -name "*.lol" -o -name "*.loa" -o -name "*.listing" -o -name "*.run.xml" -o -name "*.bcf" -o -name "*.blx.bib" -o -name "*.blx.bbl" -o -name "*.blx.bcf" -o -name "*.blx.blg" -o -name "*.blx.bbl" -o -name "*.blx.bcf" -o -name "*.sbl" -o -name "*.sblg" -o -name "*.sblg.bib" -o -name "*.sblg.bbl" -o -name "*.sblg.bcf" -o -name "*.sblg.blg" -o -name "*.sblg.bbl" -o -name "*.ist" -o -name "*.sbl" -o -name "*.syi" -o -name "*.slg" \) -type f -delete
 find . -type d -name "slprj" -exec rm -rf {} +
}

clear_temp() {
 find $TMPDIR -mindepth 1 -delete
}
# Create symbolic link
crtlib() {
 if [ -e library.bib ]; then
  rm library.bib
 fi
 ln -s "/c/Users/ahm_e/Documents/obsidian/main-ideas/refrances/library.bib" library.bib
}

# # List files
# ls() { ls -a; }

# Run MATLAB
m() { matlab -nosplash; }

# Run Python script on PDF files
RunReadPy() {
 dirPath=${1:-$(pwd)}
 if [ -d "$dirPath" ]; then
  for file in "$dirPath"/*.pdf; do
   python "/c/Users/ahm_e/Documents/PROJECTs-other/Review_paper/lib_ass/read.py" "$file"
  done
 else
  python "/c/Users/ahm_e/Documents/PROJECTs-other/Review_paper/lib_ass/read.py" "$dirPath"
 fi
}

# Create symbolic link
crtlink() {
 link_name=$1
 original_path=$2
 ln -s "$original_path" "/c/Users/ahm_e/Documents/obsidian/main-ideas/$link_name"
}

# Change directory
c() { cd "/c"; }
cc() { cd ".."; }
ccc() { cd "../.."; }
cccc() { cd "../../.."; }
ccccc() { cd "../../../../"; }

# Synchronize folders
syn_fold() {
 syn_fold_child "/c/Users/ahm_e/Documents/obsidian/main-ideas" "/c/Users/ahm_e/Documents/obsidian/main-idea-git"
}

syn_fold_child() {
 sourcePath=$1
 destinationPath=$2

 for dir in "$sourcePath"/*; do
  if [ -d "$dir" ]; then
   destinationFolder="$destinationPath/$(basename "$dir")"
   cp -r "$dir" "$destinationFolder"

   cd "$destinationFolder"
   git add .
   git commit -m "rdgulare update"
   git push
   cd "$sourcePath"
  fi
 done
}
# Clone a git repository
function clone() {
 repoUrl=$1
 newFolderName=$2
 repoName=$(basename "$repoUrl" .git)
 folderName=${newFolderName:-$repoName}
 git clone "$repoUrl" "$folderName"
}

# Convert Markdown to PDF
md2pdf() {
 inputFileName=$1
 font=$2

 if [ ! -f "$inputFileName" ]; then
  echo "Input file '$inputFileName' does not exist."
  return
 fi

 outputFileName="${inputFileName%.*}.pdf"

 if [ -z "$font" ]; then
  content=$(cat "$inputFileName")
  if [[ $content =~ ^.*[\p{Arabic}].*$ ]]; then
   font="Arial"
   orientation="rtl"
  elif [[ $content =~ ^.*[\p{Cyrillic}].*$ ]]; then
   font="Arial"
   orientation="default"
  else
   font="Latin Modern Roman"
   orientation="default"
  fi
 fi

 pandoc --pdf-engine=xelatex -V mainfont="$font" -V dir="$orientation" "$inputFileName" -o "$outputFileName"
}

# Create a new file and open it
crt() {
 FilePath=$1
 touch "$FilePath"
 open "$FilePath"
}

# Open a file or directory
function o() {
 Path=${1:-"."}
 if [ ! -e "$Path" ]; then
  echo "Path '$Path' does not exist."
  return
 fi
 open "$Path"
}

# Change SumatraPDF background color
sumatra() {
 color=$1
 filePath="/c/Users/ahm_e/AppData/Local/SumatraPDF/SumatraPDF-settings.txt"
 case $color in
  'w') newColor='#ffffff' ;; # white
  'y') newColor='#f5f5dc' ;; # yellow
 esac
 sed -i "s/\(BackgroundColor = \).*/\1$newColor/" "$filePath"
}

# Convert all PDF files in the current directory to PNG
pdf2pngall() {
 for input_file in *.pdf; do
  output_file="${input_file%.*}"
  pdftoppm -png -r 1200 "$input_file" "$output_file" > /dev/null 2>&1
 done
 for file in *-1.png; do
  new_file="${file/-1.png/.png}"
  mv "$file" "$new_file" > /dev/null 2>&1
 done
}

# Convert a PDF file to PNG
pdf2png() {
 input_file=$1
 if [ ! -f "$input_file" ]; then
  echo "Usage: pdf2png <input.pdf>"
  return
 fi
 output_file="${input_file%.*}"
 pdftoppm -png -r 2000 "$input_file" "$output_file" > /dev/null 2>&1
 png_file="$output_file-1.png"
 if [ -f "$png_file" ]; then
  new_png_file="${png_file/-1.png/.png}"
  mv "$png_file" "$new_png_file" > /dev/null 2>&1
 fi
}

# Control WireGuard
WireGuard() {
 A=$1
 if [ "$A" = "on" ]; then
  command="'C:\Program Files\WireGuard\wireguard.exe' /installtunnelservice 'C:\Program Files\WireGuard\Data\Configurations\ahmed_tunnel.conf.dpapi'"
 elif [ "$A" = "off" ]; then
  command="'C:\Program Files\WireGuard\wireguard.exe' /uninstalltunnelservice 'ahmed_tunnel'"
 fi
 powershell.exe -Command "$command"
}

# Convert TeX to Docx
pandoctex() {
 texFile=$1
 docxFile="${texFile%.*}.docx"
 pandoc -s "$texFile" -o "$docxFile" --citeproc
}
# Convert a file to CommonMark using Pandoc
PandocX() {
 i=$1
 o=$2
 pandoc -s "$i" -t commonmark --wrap=none -o "$o"
}

# Create an alias for make
alias make='mingw32-make'

